#using deque and hashmap
class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.n = capacity
        self.q = deque()
        self.mapp = {}

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.mapp:
            self.q.remove(key)
            self.q.appendleft(key)
            return self.mapp[key]
        else:
            return -1


        

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        if key in self.mapp:
            self.mapp[key]=value
            self.q.remove(key)
            self.q.appendleft(key)
        else:
            if len(self.q)==self.n:
                del_key = self.q.pop()
                del self.mapp[del_key]
            self.mapp[key]=value
            self.q.appendleft(key)
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
